<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ECC Welding Inspector - D Lawrence</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0f172a; /* Slate-900 */
        }
        .container-card {
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
            background-color: #1e293b; /* Slate-800 */
        }
        .result-area {
            white-space: pre-wrap;
            min-height: 100px;
        }
        /* Spinner styles */
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3b82f6; /* Blue-500 */
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Markdown styling for the report output */
        #report-output h2 {
            /* Targeting H2 elements within the output area */
            @apply text-xl font-bold mt-4 mb-2 text-sky-400;
        }
        #report-output p {
            @apply mb-2;
        }
        #report-output ul {
            @apply list-disc list-inside ml-4 mb-4;
        }
        #report-output strong {
            @apply font-semibold text-gray-100;
        }
    </style>
</head>
<body class="p-4 md:p-8 min-h-screen flex items-start justify-center">

    <div id="app" class="container-card w-full max-w-4xl mx-auto p-6 md:p-10 rounded-xl text-gray-200">
        <h1 class="text-3xl sm:text-4xl font-extrabold mb-2 text-sky-400 text-center">ECC Welding Inspector - D Lawrence</h1>
        <p class="text-sm text-gray-400 mb-6 text-center">Analyze a weld image and generate a professional inspection report.</p>

        <!-- User ID Display (For automatic authentication confirmation) -->
        <div id="user-id-display" class="bg-slate-700 p-3 rounded-lg mb-6 break-all">
            <span class="font-semibold text-gray-400">Current User ID: </span>
            <span id="user-id" class="text-sm text-sky-400">Loading...</span>
        </div>

        <!-- Inputs -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Image Upload -->
            <div class="bg-slate-700 p-4 rounded-lg">
                <label class="block text-sm font-medium text-gray-300 mb-2">1. Upload Weld Image (JPG/PNG)</label>
                <input type="file" id="image-input" accept="image/png, image/jpeg" class="w-full p-2 border border-slate-600 rounded-lg bg-slate-800 text-gray-200 focus:ring-blue-500 focus:border-blue-500">
                <img id="preview-image" class="mt-4 max-h-60 w-auto rounded-lg shadow-md mx-auto hidden" alt="Image Preview">
            </div>
            
            <!-- Question Input -->
            <div class="bg-slate-700 p-4 rounded-lg">
                <label class="block text-sm font-medium text-gray-300 mb-2">2. Inspection Prompt (Optional)</label>
                <textarea id="prompt-input" rows="7" class="w-full p-3 border border-slate-600 rounded-lg bg-slate-800 text-gray-200 focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., 'Check for undercut and porosity according to ASME Section IX standards.'"></textarea>
            </div>
        </div>

        <!-- Analyze Button -->
        <button id="analyze-button" class="w-full flex items-center justify-center bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-200 disabled:opacity-50 transform hover:scale-[1.01] shadow-lg">
            <span id="button-text">Analyze Weld & Generate Report</span>
            <div id="loading-spinner" class="spinner ml-3 hidden"></div>
        </button>

        <!-- Report Area -->
        <div class="mt-10">
            <h2 class="text-2xl font-bold mb-3 text-sky-400 border-b border-slate-600 pb-2">Inspection Report</h2>
            <div id="report-output" class="result-area p-6 border border-slate-600 rounded-xl bg-slate-800 text-gray-300 prose prose-invert max-w-none">
                <p>Upload an image and click the button above to receive a full inspection report from the AI inspector.</p>
            </div>
        </div>
        
        <!-- Error Message Box -->
        <div id="error-message" class="mt-4 p-3 bg-red-800 border border-red-500 text-white rounded-lg hidden"></div>
    </div>

    <script type="module">
        // Global variables provided by the Canvas environment (NOTE: These will be defined 
        // by the Canvas environment when run there, but are safe defaults for GitHub)
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initialAuthToken : undefined;
        const apiKey = ""; // Leave as empty string for Canvas environment to inject.

        // Firebase Imports (required for authentication and user ID)
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        const DEFAULT_PROMPT = "Act as a Certified Welding Inspector (CWI) following AWS D1.1 standards. Analyze this weld image visually. Provide a comprehensive report in markdown format that includes: 1) A description of the weld joint and appearance, 2) A list of specific visible defects (e.g., undercut, porosity, slag inclusion, excessive reinforcement, toe cracks), 3) The overall **Acceptance Status** (Accept or Reject), and 4) Detailed **Recommended Action** (e.g., grind smooth, repair, re-inspect).";

        // --- Utility Functions ---

        /**
         * Converts a File object to a Base64 encoded string.
         * @param {File} file - The image file to convert.
         * @returns {Promise<string>} Base64 data string.
         */
        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result.split(',')[1]); // Extract base64 part
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        }

        /**
         * Hides or shows the loading state on the button.
         * @param {boolean} isLoading - True to show spinner and disable button, false otherwise.
         */
        function setLoadingState(isLoading) {
            const button = document.getElementById('analyze-button');
            const buttonText = document.getElementById('button-text');
            const spinner = document.getElementById('loading-spinner');
            
            button.disabled = isLoading;
            buttonText.textContent = isLoading ? 'Analyzing Weld...' : 'Analyze Weld & Generate Report';
            spinner.classList.toggle('hidden', !isLoading);
        }

        /**
         * Displays a temporary error message.
         * @param {string} message - The error message to display.
         */
        function displayError(message) {
            const errorBox = document.getElementById('error-message');
            errorBox.textContent = `Error: ${message}`;
            errorBox.classList.remove('hidden');
            document.getElementById('report-output').innerHTML = '<p class="text-red-400">Analysis failed. See error above.</p>';
            setTimeout(() => {
                errorBox.classList.add('hidden');
            }, 8000);
        }
        
        /**
         * Makes the API call to Gemini with exponential backoff for retries.
         */
        async function callGeminiAPI(payload, maxRetries = 3) {
            // NOTE: When running on a public server like GitHub Pages, the apiKey 
            // variable must be populated here to connect to the Gemini API.
            // In the Canvas environment, this is handled automatically.
            if (!apiKey && typeof __initial_auth_token === 'undefined') {
                 throw new Error("API Key is missing. This application requires a Gemini API Key to function outside of the dedicated learning environment.");
            }
            
            const model = "gemini-2.5-flash-preview-05-20";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
            
            for (let attempt = 0; attempt < maxRetries; attempt++) {
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        return await response.json();
                    } else if (response.status === 429 && attempt < maxRetries - 1) {
                        // Too Many Requests (Rate limit), wait and retry
                        const delay = Math.pow(2, attempt) * 1000;
                        console.warn(`Rate limit hit. Retrying in ${delay / 1000}s...`);
                        await new Promise(resolve => setTimeout(resolve, delay));
                    } else {
                        // Other HTTP error or final retry failed
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(`API call failed with status ${response.status}: ${errorData.error?.message || response.statusText}`);
                    }
                } catch (e) {
                    if (attempt === maxRetries - 1) {
                        throw new Error(`API call completely failed: ${e.message}`);
                    }
                    // For network errors or unexpected issues, retry after a delay
                    const delay = Math.pow(2, attempt) * 1000;
                    console.warn(`Network error. Retrying in ${delay / 1000}s...`);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }


        // --- Core Application Logic ---

        /**
         * Main function to handle image upload, API call, and report display.
         */
        async function analyzeWeld() {
            const imageInput = document.getElementById('image-input');
            const promptInput = document.getElementById('prompt-input');
            const reportOutput = document.getElementById('report-output');

            const file = imageInput.files[0];
            const prompt = promptInput.value.trim() || DEFAULT_PROMPT;

            reportOutput.innerHTML = '<p>Initiating analysis...</p>';
            
            if (!file) {
                displayError("Please upload an image file of the weld to begin inspection.");
                return;
            }

            setLoadingState(true);

            try {
                // 1. Convert image to Base64
                const base64ImageData = await fileToBase64(file);

                // 2. Build the multimodal payload
                const payload = {
                    contents: [
                        {
                            role: "user",
                            parts: [
                                { text: prompt },
                                {
                                    inlineData: {
                                        mimeType: file.type,
                                        data: base64ImageData
                                    }
                                }
                            ]
                        }
                    ],
                    // Omit 'tools' for vision tasks
                };

                // 3. Call the API
                const result = await callGeminiAPI(payload);
                
                // 4. Process the result
                const candidate = result.candidates?.[0];

                if (candidate && candidate.content?.parts?.[0]?.text) {
                    const text = candidate.content.parts[0].text;
                    
                    // Display the raw Markdown text.
                    reportOutput.textContent = text; 

                } else {
                    displayError("API returned an empty or invalid response. Please check your image format or try a different prompt.");
                }

            } catch (error) {
                console.error("Analysis failed:", error);
                displayError(error.message || "An unknown error occurred during weld analysis.");
            } finally {
                setLoadingState(false);
            }
        }


        // --- Initialization on DOM Load ---

        document.addEventListener('DOMContentLoaded', async () => {
            console.log("DOM fully loaded and parsed.");
            
            // Set the default prompt
            document.getElementById('prompt-input').value = DEFAULT_PROMPT;

            // --- FIREBASE INITIALIZATION & AUTHENTICATION (for user ID display) ---
            // This block handles the secure, automatic sign-in within the Canvas environment.
            if (Object.keys(firebaseConfig).length > 0) {
                setLogLevel('error');
                const app = initializeApp(firebaseConfig);
                const auth = getAuth(app);
                
                try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Firebase Auth failed:", error);
                    document.getElementById('user-id').textContent = 'Auth Failed!';
                }

                onAuthStateChanged(auth, (user) => {
                    const userIdElement = document.getElementById('user-id');
                    if (user) {
                        const userId = user.uid;
                        userIdElement.textContent = userId;
                    } else {
                        userIdElement.textContent = 'User not signed in.';
                    }
                });
            } else {
                // Default display for local/GitHub Pages runs
                document.getElementById('user-id').textContent = 'Not Applicable (Using local context)';
            }
            
            // --- Attach Event Listeners ---
            document.getElementById('analyze-button').addEventListener('click', analyzeWeld);
            
            const imageInput = document.getElementById('image-input');
            const previewImage = document.getElementById('preview-image');

            imageInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        previewImage.src = e.target.result;
                        previewImage.classList.remove('hidden');
                    };
                    reader.readAsDataURL(file);
                } else {
                    previewImage.classList.add('hidden');
                    previewImage.src = '';
                }
            });
            
            console.log("Event listeners attached.");
        });

    </script>
</body>
</html>